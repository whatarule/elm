var _user$project$Commands$playerEncoder = function (player) {
	var attributes = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'id',
			_1: _elm_lang$core$Json_Encode$string(player.id)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'name',
				_1: _elm_lang$core$Json_Encode$string(player.name)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'level',
					_1: _elm_lang$core$Json_Encode$int(player.level)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'equip',
						_1: _elm_lang$core$Json_Encode$string(player.equip)
					},
					_1: {ctor: '[]'}
				}
			}
		}
	};
	return _elm_lang$core$Json_Encode$object(attributes);
};
var _user$project$Commands$playerUrl = function (playerId) {
	return A2(_elm_lang$core$Basics_ops['++'], 'http://localhost:4000/players/', playerId);
};
var _user$project$Commands$savePlayersUrl = 'http://localhost:4000/players';
var _user$project$Commands$onLinkClick = function (message) {
	var options = {stopPropagation: false, preventDefault: true};
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'click',
		options,
		_elm_lang$core$Json_Decode$succeed(message));
};
var _user$project$Commands$playerDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'equip',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'level',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'name',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'id',
				_elm_lang$core$Json_Decode$string,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Models$Player)))));
var _user$project$Commands$savePlayerRequest = F2(
	function (method, player) {
		var _p0 = function () {
			var _p1 = method;
			switch (_p1.ctor) {
				case 'Patch':
					return {ctor: '_Tuple3', _0: 'PATCH', _1: _user$project$Commands$playerDecoder, _2: player.id};
				case 'Post':
					return {ctor: '_Tuple3', _0: 'POST', _1: _user$project$Commands$playerDecoder, _2: ''};
				default:
					return {
						ctor: '_Tuple3',
						_0: 'DELETE',
						_1: _elm_lang$core$Json_Decode$succeed(player),
						_2: player.id
					};
			}
		}();
		var methodStr = _p0._0;
		var decoder = _p0._1;
		var urlId = _p0._2;
		return _elm_lang$http$Http$request(
			{
				body: _elm_lang$http$Http$jsonBody(
					_user$project$Commands$playerEncoder(player)),
				expect: _elm_lang$http$Http$expectJson(decoder),
				headers: {ctor: '[]'},
				method: methodStr,
				timeout: _elm_lang$core$Maybe$Nothing,
				url: _user$project$Commands$playerUrl(urlId),
				withCredentials: false
			});
	});
var _user$project$Commands$savePlayerCmd = F2(
	function (method, player) {
		return A2(
			_elm_lang$http$Http$send,
			_user$project$Msgs$OnPlayerSave,
			A2(_user$project$Commands$savePlayerRequest, method, player));
	});
var _user$project$Commands$playersDecoder = _elm_lang$core$Json_Decode$list(_user$project$Commands$playerDecoder);
var _user$project$Commands$home = _elm_lang$navigation$Navigation$newUrl('http://localhost:3000/');
var _user$project$Commands$checkNewPlayer = function (response) {
	var _p2 = response;
	switch (_p2.ctor) {
		case 'NotAsked':
			return _elm_lang$core$Platform_Cmd$none;
		case 'Loading':
			return _elm_lang$core$Platform_Cmd$none;
		case 'Failure':
			return _elm_lang$core$Platform_Cmd$none;
		default:
			var maybePlayer = _elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$filter,
					function (player) {
						return _elm_lang$core$Native_Utils.eq(player.name, '');
					},
					_p2._0));
			var _p3 = maybePlayer;
			if (_p3.ctor === 'Just') {
				return _elm_lang$navigation$Navigation$newUrl(
					_user$project$Routing$playerPath(_p3._0.id));
			} else {
				return _elm_lang$core$Platform_Cmd$none;
			}
	}
};
var _user$project$Commands$fetchPlayersUrl = 'http://localhost:4000/players';
var _user$project$Commands$fetchPlayers = A2(
	_elm_lang$core$Platform_Cmd$map,
	_user$project$Msgs$OnFetchPlayers,
	_krisajenkins$remotedata$RemoteData$sendRequest(
		A2(_elm_lang$http$Http$get, _user$project$Commands$fetchPlayersUrl, _user$project$Commands$playersDecoder)));
